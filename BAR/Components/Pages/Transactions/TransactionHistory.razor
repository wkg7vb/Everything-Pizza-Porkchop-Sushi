@using BAR.Data
@using BAR.Data.Models;
@using BAR.Data.Services;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Identity;
@using System.Text.Json

@inject ITransaction TransactionManager;
@inject UserManager<ApplicationUser> UserManager;
@inject ApplicationDbContext dbContext;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject NavigationManager NavigationManager;

@attribute [Authorize];

@page "/transactions"
@rendermode InteractiveServer

@* User will be able to veiw, edit and remove UserTransactions *@

<PageTitle>Transaction History</PageTitle>

<h1>
    Transaction History
</h1>

@* Transactions List *@

<Toasts class="p-3" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopCenter" />

@if (user is not null){
    <Grid @ref="transactionGrid"
    TItem="UserTransaction"
    DataProvider="TransactionDataProvider"
    Class="table table-hover table-striped"
    AllowSorting="true"
    AllowPaging="true"
    PageSize="10"
    AllowRowClick="true"
    OnRowClick="ShowUpdateModal"
    Responsive="true"
    GridSettingsChanged="OnGridSettingsChanged"
    SettingsProvider="GridSettingsProvider">
        <GridColumns>
            <GridColumn TItem="UserTransaction" HeaderText="Date" SortKeySelector="item => item.TransactionDateTime" IsDefaultSortColumn="true" SortDirection="SortDirection.Descending">
                <text>@context.TransactionDateTime.ToShortDateString()</text>
            </GridColumn>
            <GridColumn TItem="UserTransaction" HeaderText="Category" SortKeySelector="item => item.TransactionCategory">
                @context.TransactionCategory
            </GridColumn>
            <GridColumn TItem="UserTransaction" HeaderText="Label" SortKeySelector="item => item.TransactionLabel">
                @context.TransactionLabel
            </GridColumn>
            @switch(user.UserLocale)
            {
                case "en-US":
                    <GridColumn TItem="UserTransaction" HeaderText="Amount" SortKeySelector="item => item.TransactionAmt">
                        $@context.TransactionAmt
                    </GridColumn>
                    break;
                case "es-MX":
                    <GridColumn TItem="UserTransaction" HeaderText="Amount" SortKeySelector="item => item.TransactionAmt">
                        MX$@context.TransactionAmt
                    </GridColumn>
                    break;
                case "en-GB":
                    <GridColumn TItem="UserTransaction" HeaderText="Amount" SortKeySelector="item => item.TransactionAmt">
                        £@context.TransactionAmt
                    </GridColumn>
                    break;
                case "en-EU":
                    <GridColumn TItem="UserTransaction" HeaderText="Amount" SortKeySelector="item => item.TransactionAmt">
                        €@context.TransactionAmt
                    </GridColumn>
                    break;
                default:
                    <GridColumn TItem="UserTransaction" HeaderText="Amount" SortKeySelector="item => item.TransactionAmt">
                        @context.TransactionAmt
                    </GridColumn>
                    break;
            }
            <GridColumn TItem="UserTransaction" HeaderText="" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End">
                <Icon Name="IconName.PencilSquare" Size="IconSize.x5" />
            </GridColumn>
        </GridColumns>
    </Grid>
}

    @* Update Transaction Modal *@
<Modal @ref="updatemodal" Title="Update Transaction" IsVerticallyCentered="true">
    <BodyTemplate>
        Date:
        <div class="mb-3">
            <DateInput TValue="DateTime" @bind-Value="@date" Placeholder="Enter Date" />
        </div>
        <div class="mb-3">Entered date: @date.ToShortDateString()</div>
        Label:
        <input type="text" class="mt-2" @bind-value="label" PlaceHolder="@label" /> <br>
        Amount:
        <input type="text" class="mt-2" @bind-value="amount" PlaceHolder="@amount" /> <br> <br>
        Category:
        <select @bind="category" PlaceHolder="@category">
            <option value="Housing">Housing</option>
            <option value="Bills/Utilities">Bills/Utilities</option>
            <option value="Grocery/Dining">Grocery/Dining</option>
            <option value="Transportation">Transportation</option>
            <option value="Education">Education</option>
            <option value="Debt">Debt</option>
            <option value="Entertainment">Entertainment</option>
            <option value="Shopping">Shopping</option>
            <option value="Medical">Medical</option>
            <option value="Investing">Investing</option>
            <option value="Miscellaneous">Miscellaneous</option>
        </select>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="UpdateFromModal">Update</Button>
        <Button Color="ButtonColor.Danger" @onclick="ShowDeleteConfirm">Delete</Button>
        <Button Color="ButtonColor.Secondary" @onclick="CancelUpdateModal">Cancel</Button>
    </FooterTemplate>
</Modal>


    @* Delete Transaction Dialog *@
<ConfirmDialog @ref="deletedialog" />

@code {
    //vars
    private ApplicationUser user = default!;
    private List<UserTransaction> userTransactions = default!;
    private DateTime date = DateTime.Now;
    private string category = "Housing";
    private string label = "";
    private decimal amount = 0.00m;
    private UserTransaction transactionToUpdate = default!;
    private Grid<UserTransaction> transactionGrid = default!;

    //dependency injection
    [Inject] ToastService toastService { get; set; } = default!;
    [Inject] public IJSRuntime JS { get; set; } = default!;

    //methods
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(10);
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            user = await UserManager.GetUserAsync(authState.User);
        }
    }

    //grid
    private async Task<GridDataProviderResult<UserTransaction>> TransactionDataProvider(GridDataProviderRequest<UserTransaction> request)
    {
        await Task.Delay(20);
        if (userTransactions == null)
        {
            userTransactions = await TransactionManager.GetTransactions(user.Id);
        }
        return await Task.FromResult(request.ApplyTo(userTransactions));
    }

    private async Task OnGridSettingsChanged(GridSettings settings)
    {
        if (settings is null)
            return;

        // NOTE: enable below two lines, if you want to set default values for PageNumber and PageSize all the time.
        //settings.PageNumber = 1;
        //settings.PageSize = 10;

        await JS.InvokeVoidAsync("window.localStorage.setItem", "grid-settings", JsonSerializer.Serialize(settings));
    }

    private async Task<GridSettings> GridSettingsProvider()
    {
        var settingsJson = await JS.InvokeAsync<string>("window.localStorage.getItem", "grid-settings");
        if (string.IsNullOrWhiteSpace(settingsJson))
            return null!;

        var settings = JsonSerializer.Deserialize<GridSettings>(settingsJson);
        if (settings is null)
            return null!;

        return settings;
    }

    //update modal
    private Modal updatemodal = default!;
    private async Task ShowUpdateModal(GridRowEventArgs<UserTransaction> transaction)
    {
        transactionToUpdate = transaction.Item;
        date = transactionToUpdate.TransactionDateTime;
        label = transactionToUpdate.TransactionLabel;
        amount = transactionToUpdate.TransactionAmt;
        category = transactionToUpdate.TransactionCategory;
        await updatemodal.ShowAsync();
    }

    private async Task CancelUpdateModal()
    {
        await updatemodal.HideAsync();
    }

    private async Task UpdateFromModal()
    {
        if (label != null && amount != 0.00m)
        {
            transactionToUpdate.TransactionDateTime = date;
            transactionToUpdate.TransactionLabel = label;
            transactionToUpdate.TransactionAmt = amount + 0.00m;
            transactionToUpdate.TransactionCategory = category;

            transactionToUpdate.UserId = user.Id;
            transactionToUpdate.User = user;

            await TransactionManager.UpdateTransaction(transactionToUpdate);
            await updatemodal.HideAsync();
            toastService.Notify(new ToastMessage(ToastType.Success, $"Successfully updated transaction."));
            NavigationManager.Refresh(true);
        }
        else
        {
            toastService.Notify(new ToastMessage(ToastType.Danger, $"Please fill all fields."));
        }
    }

    //delete dialog
    private ConfirmDialog deletedialog = default!;
    private async Task ShowDeleteConfirm()
    {
        var confirmation = await deletedialog.ShowAsync(
            title: "Delete Transaction?",
            message1: transactionToUpdate.TransactionLabel.ToString(),
            message2: transactionToUpdate.TransactionAmt.ToString());

        if (confirmation)
        {
            //delete transaction
            await TransactionManager.DeleteTransaction(transactionToUpdate);
            await updatemodal.HideAsync();
            toastService.Notify(new ToastMessage(ToastType.Success, $"Transaction deleted successfully."));
            NavigationManager.Refresh(true);
        }
        else
        {
            // do nothing
            toastService.Notify(new ToastMessage(ToastType.Secondary, $"Transaction not deleted."));
        }
    }

    //cancel by doing nothing
    private async Task CancelButton()
    {
        await updatemodal.HideAsync();
    }
}