@using BAR.Data
@using BAR.Data.Models;
@using BAR.Data.Services;
@using BAR.Data.Controllers;
@using BAR.Data.Interfaces;

@page "/transactions"
@rendermode InteractiveServer

@*
    User will be able to veiw, edit and remove UserTransactions
*@

<PageTitle>Transaction History</PageTitle>

<h1>
    Transaction History
</h1>

@if (UserTransactions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Category</th>
                <th>Label</th>
                <th>Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var UserTransaction in UserTransactions)
            {
                <tr>
                    <td>@UserTransaction.TransactionDateTime</td>
                    <td>@UserTransaction.TransactionCategory</td>
                    <td>@UserTransaction.TransactionLabel</td>
                    <td>@UserTransaction.TransactionAmt</td>
                    <td>
                        <button class="btn btn-edit btn-sm" @onclick="() => UpdateModal(UserTransaction.TransactionId)">Update</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteConfirm(UserTransaction.TransactionId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <ConfirmDialog @ref="deltrans"/>
}

@code {
    private List<UserTransaction> UserTransactions;

    protected async Task OnInitiallizedAsync()
    {
        UserTransactions = await GetTransactions();
    }

    private void UpdateModal(UserTransaction transaction)
    {
        _dbContext.UserTransactions.Add(transaction);

    }

    private async Task DeleteTransaction(int TID)
    {
        await TransactoinManager
    }
}