@using BAR.Data
@using BAR.Data.Models;
@using BAR.Data.Services;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Identity;

@inject ITransaction TransactionManager;
@inject UserManager<ApplicationUser> UserManager;
@inject ApplicationDbContext dbContext;
@inject AuthenticationStateProvider AuthenticationStateProvider;

@attribute [Authorize];

@page "/transactions"
@rendermode InteractiveServer

@*
    User will be able to veiw, edit and remove UserTransactions
*@

<PageTitle>Transaction History</PageTitle>

<h1>
    Transaction History
</h1>

@* Transactions List*@

@if (userTransactions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Category</th>
                <th>Label</th>
                <th>Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (user.Id == "54fb3251-9304-4342-87aa-36d7ffc08334" && userTransactions != null)@* Rootin Roo's UserId hardcoded *@
            {
                AddSeedData();
            }
            @foreach (var UserTransaction in userTransactions)
            {
                @if(UserTransaction.UserId == user.Id)
                {
                    <tr>
                        <td>@UserTransaction.TransactionDateTime</td>
                        <td>@UserTransaction.TransactionCategory</td>
                        <td>@UserTransaction.TransactionLabel</td>
                        <td>@UserTransaction.TransactionAmt</td>
                        <td>
                            <button class="btn btn-edit btn-sm" @onclick="() => ShowUpdateModal(UserTransaction)">Update</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ShowDeleteConfirm(UserTransaction)">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    @* Update Transaction Modal *@
    <Modal ref="updatemodal"/>

    @* Delete Transaction Dialog *@
    <ConfirmDialog @ref="deletedialog"/>
}

@code {
    //vars
    private ApplicationUser user = default!;
    private List<UserTransaction> userTransactions = default!;

    //dependency injection
    [Inject] ToastService toastService { get; set; } = default!;

    //methods
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            user = await UserManager.GetUserAsync(authState.User);
        }
        userTransactions = await TransactionManager.GetTransactions();
    }

    //update modal
    private Modal updatemodal = default!;
    private async void ShowUpdateModal(UserTransaction transaction)
    {

    }

    //delete dialog
    private ConfirmDialog deletedialog = default!;
    private async void ShowDeleteConfirm(UserTransaction transaction)
    {
        var confirmation = await deletedialog.ShowAsync(
            title: "Delete Transaction?",
            message1: transaction.TransactionLabel.ToString(),
            message2: transaction.TransactionAmt.ToString());

        if (confirmation)
        {
            //delete transaction
            await TransactionManager.DeleteTransaction(transaction);
            userTransactions = await TransactionManager.GetTransactions();
            toastService.Notify(new ToastMessage(ToastType.Success, $"Transaction deleted successfully."));
        }
        else
        {
            // do nothing
            toastService.Notify(new ToastMessage(ToastType.Secondary, $"Transaction not deleted."));
        }
    }

    //for devs only do not call normally
    private async Task AddSeedData()
    {
        UserTransaction temp = new UserTransaction();
        temp.TransactionDateTime = new DateTime(2024, 10, 1);
        temp.TransactionLabel = "Rent";
        temp.TransactionAmt = 700.0m;
        temp.TransactionCategory = "Housing";
        temp.UserId = user.Id;
        temp.User = user;
        await TransactionManager.AddTransaction(temp);
        userTransactions = await TransactionManager.GetTransactions();
    
        UserTransaction temp1 = new UserTransaction();
        temp1.TransactionDateTime = new DateTime(2024, 10, 14);
        temp1.TransactionLabel = "Takeout";
        temp1.TransactionAmt = 25.0m;
        temp1.TransactionCategory = "Grocery/Dining";
        temp1.UserId = user.Id;
        temp1.User = user;
        await TransactionManager.AddTransaction(temp1);
        userTransactions = await TransactionManager.GetTransactions();
    
        UserTransaction temp2 = new UserTransaction();
        temp2.TransactionDateTime = new DateTime(2024, 10, 31);
        temp2.TransactionLabel = "Student Loan";
        temp2.TransactionAmt = 100.0m;
        temp2.TransactionCategory = "Education";
        temp2.UserId = user.Id;
        temp2.User = user;
        await TransactionManager.AddTransaction(temp2);
        userTransactions = await TransactionManager.GetTransactions();
    
        UserTransaction temp3 = new UserTransaction();
        temp3.TransactionDateTime = new DateTime(2024, 10, 31);
        temp3.TransactionLabel = "Movie Date";
        temp3.TransactionAmt = 40.0m;
        temp3.TransactionCategory = "Entertainment";
        temp3.UserId = user.Id;
        temp3.User = user;
        await TransactionManager.AddTransaction(temp3);
        userTransactions = await TransactionManager.GetTransactions();
    
        UserTransaction temp4 = new UserTransaction();
        temp4.TransactionDateTime = new DateTime(2024, 10, 31);
        temp4.TransactionLabel = "Fall Fashion Festival";
        temp4.TransactionAmt = 700.0m;
        temp4.TransactionCategory = "Shopping";
        temp4.UserId = user.Id;
        temp4.User = user;
        await TransactionManager.AddTransaction(temp4);
        userTransactions = await TransactionManager.GetTransactions();
    
        UserTransaction temp5 = new UserTransaction();
        temp5.TransactionDateTime = new DateTime(2024, 10, 31);
        temp5.TransactionLabel = "Insurance";
        temp5.TransactionAmt = 100.0m;
        temp5.TransactionCategory = "Transportation";
        temp5.UserId = user.Id;
        temp5.User = user;
        await TransactionManager.AddTransaction(temp5);
        userTransactions = await TransactionManager.GetTransactions();
    
        UserTransaction temp6 = new UserTransaction();
        temp6.TransactionDateTime = new DateTime(2024, 10, 31);
        temp6.TransactionLabel = "Insurance";
        temp6.TransactionAmt = 300.0m;
        temp6.TransactionCategory = "Medical";
        temp6.UserId = user.Id;
        temp6.User = user;
        await TransactionManager.AddTransaction(temp6);
        userTransactions = await TransactionManager.GetTransactions();
    
        UserTransaction temp7 = new UserTransaction();
        temp7.TransactionDateTime = new DateTime(2024, 10, 31);
        temp7.TransactionLabel = "Bonds";
        temp7.TransactionAmt = 100.0m;
        temp7.TransactionCategory = "Investing";
        temp7.UserId = user.Id;
        temp7.User = user;
        await TransactionManager.AddTransaction(temp7);
        userTransactions = await TransactionManager.GetTransactions();
    
        UserTransaction temp8 = new UserTransaction();
        temp8.TransactionDateTime = new DateTime(2024, 10, 27);
        temp8.TransactionLabel = "Gas";
        temp8.TransactionAmt = 20.0m;
        temp8.TransactionCategory = "Transportation";
        temp8.UserId = user.Id;
        temp8.User = user;
        await TransactionManager.AddTransaction(temp8);
        userTransactions = await TransactionManager.GetTransactions();
    
        UserTransaction temp9 = new UserTransaction();
        temp9.TransactionDateTime = new DateTime(2024, 10, 31);
        temp9.TransactionLabel = "Halloween Candy";
        temp9.TransactionAmt = 50.0m;
        temp9.TransactionCategory = "Miscellaneous";
        temp9.UserId = user.Id;
        temp9.User = user;
        await TransactionManager.AddTransaction(temp9);
        userTransactions = await TransactionManager.GetTransactions();
    }
}