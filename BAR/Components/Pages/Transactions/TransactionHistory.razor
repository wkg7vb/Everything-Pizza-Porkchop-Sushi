@using BAR.Data
@using BAR.Data.Models;
@using BAR.Data.Services;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Identity;

@inject ITransaction TransactionManager;
@inject UserManager<ApplicationUser> UserManager;
@inject ApplicationDbContext dbContext;
@inject AuthenticationStateProvider AuthenticationStateProvider;

@attribute [Authorize];

@page "/transactions"
@rendermode InteractiveServer

@* User will be able to veiw, edit and remove UserTransactions *@

<PageTitle>Transaction History</PageTitle>

<h1>
    Transaction History
</h1>

@* Transactions List *@
<h3>
    Click a transaction to edit or delete it.
</h3>

<Toasts class="p-3" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopCenter" />

    <Grid TItem="UserTransaction"
        DataProvider="TransactionDataProvider"
        Class="table table-hover table-striped"
        AllowFiltering="true"
        AllowSorting="true"
        AllowPaging="true"
        PageSize="10"
        AllowRowClick="true"
        OnRowClick="ShowUpdateModal"
        Responsive="true">
        <GridColumns>
            <GridColumn TItem="UserTransaction" HeaderText="Date/Time">
                @context.TransactionDateTime
            </GridColumn>
            <GridColumn TItem="UserTransaction" HeaderText="Category">
                @context.TransactionCategory
            </GridColumn>
            <GridColumn TItem="UserTransaction" HeaderText="Label">
                @context.TransactionLabel
            </GridColumn>
            <GridColumn TItem="UserTransaction" HeaderText="Amount">
                @context.TransactionAmt
            </GridColumn>
        </GridColumns>
    </Grid>

    @* Update Transaction Modal *@
<Modal @ref="updatemodal" Title="Update Transaction" IsVerticallyCentered="true">
        <BodyTemplate>
            Date:
            <div class="mb-3">
                <DateInput TValue="DateTime" @bind-Value="@date" Placeholder="Enter Date" />
            </div>
            <div class="mb-3">Entered date: @date</div>
            Label:
            <input type="text" class="mt-2" @bind-value="label" PlaceHolder="@label"/> <br>
            Amount:
            <input type="text" class="mt-2" @bind-value="amount" PlaceHolder="@label" /> <br> <br>
            Category:
            <InputSelect @bind-value="category" PlaceHolder="@category">
                <option value="Housing">Housing</option>
                <option value="Bills/Utilities">Bills/Utilities</option>
                <option value="Grocery/Dining">Grocery/Dining</option>
                <option value="Transportation">Transportation</option>
                <option value="Education">Education</option>
                <option value="Debt">Debt</option>
                <option value="Entertainment">Entertainment</option>
                <option value="Shopping">Shopping</option>
                <option value="Medical">Medical</option>
                <option value="Investing">Investing</option>
                <option value="Miscellaneous">Miscellaneous</option>
            </InputSelect>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Primary" @onclick="UpdateFromModal">Update</Button>
            <Button Color="ButtonColor.Danger" @onclick="ShowDeleteConfirm">Delete</Button>
            <Button Color="ButtonColor.Secondary" @onclick="CancelUpdateModal">Cancel</Button>
        </FooterTemplate>
    </Modal>


    @* Delete Transaction Dialog *@
    <ConfirmDialog @ref="deletedialog"/>

@code {
    //vars
    private ApplicationUser user = default!;
    private List<UserTransaction> userTransactions = default!;
    private DateTime date = DateTime.Now.AddDays(0);
    private string category = default!;
    private string label = default!;
    private decimal amount = default!;
    private UserTransaction transactionToUpdate;
    private bool showGrid = true;

    //dependency injection
    [Inject] ToastService toastService { get; set; } = default!;

    //methods
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            user = await UserManager.GetUserAsync(authState.User);
        }
        userTransactions = await TransactionManager.GetTransactions(user.Id);
    }

    private async Task<GridDataProviderResult<UserTransaction>> TransactionDataProvider(GridDataProviderRequest<UserTransaction> request)
    {
        if (userTransactions is null)
        {
            userTransactions = await TransactionManager.GetTransactions(user.Id);
        }
        return await Task.FromResult(request.ApplyTo(userTransactions));
    }

    //update modal
    private Modal updatemodal = default!;
    private async Task ShowUpdateModal(GridRowEventArgs<UserTransaction> transaction)
    {
        transactionToUpdate = transaction.Item;
        date = transactionToUpdate.TransactionDateTime;
        label = transactionToUpdate.TransactionLabel;
        amount = transactionToUpdate.TransactionAmt;
        category = transactionToUpdate.TransactionCategory;
        await updatemodal?.ShowAsync();
    }

    private async Task CancelUpdateModal()
    {
        await updatemodal?.HideAsync();
    }

    private async Task UpdateFromModal()
    {
        if (label != null && amount != 0.00m)
        {
            transactionToUpdate.TransactionDateTime = date;
            transactionToUpdate.TransactionLabel = label;
            transactionToUpdate.TransactionAmt = amount;
            transactionToUpdate.TransactionCategory = category;

            transactionToUpdate.UserId = user.Id;
            transactionToUpdate.User = user;

            await TransactionManager.UpdateTransaction(transactionToUpdate);
            userTransactions = await TransactionManager.GetTransactions(user.Id);
            updatemodal?.HideAsync();
            toastService.Notify(new ToastMessage(ToastType.Success, $"Successfully updated transaction."));
            InvokeAsync(StateHasChanged); //FIXME
        }
        else
        {
            toastService.Notify(new ToastMessage(ToastType.Danger, $"Please fill all fields."));
        }
    }

    //delete dialog
    private ConfirmDialog deletedialog = default!;
    private async Task ShowDeleteConfirm()
    {
        var confirmation = await deletedialog.ShowAsync(
            title: "Delete Transaction?",
            message1: transactionToUpdate.TransactionLabel.ToString(),
            message2: transactionToUpdate.TransactionAmt.ToString());

        if (confirmation)
        {
            //delete transaction
            await TransactionManager.DeleteTransaction(transactionToUpdate);
            await updatemodal.HideAsync();
            userTransactions = await TransactionManager.GetTransactions(user.Id);
            toastService.Notify(new ToastMessage(ToastType.Success, $"Transaction deleted successfully."));
            InvokeAsync(StateHasChanged); // FIXME
        }
        else
        {
            // do nothing
            toastService.Notify(new ToastMessage(ToastType.Secondary, $"Transaction not deleted."));
        }
    }

    //cancel by doing nothing
    private async Task CancelButton()
    {
        await updatemodal?.HideAsync();
    }
}