@using BAR.Data
@using BAR.Data.Models;
@using BAR.Data.Services;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Mvc;
@inject ITransaction TransactionManager;

@page "/transactions"
@rendermode InteractiveServer

@*
    User will be able to veiw, edit and remove UserTransactions
*@

<PageTitle>Transaction History</PageTitle>

<h1>
    Transaction History
</h1>

@* Transactions List*@

@if (userTransactions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Category</th>
                <th>Label</th>
                <th>Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var UserTransaction in userTransactions)
            {
                @if(UserTransaction.UserId == user.Id)
                {
                    <tr>
                        <td>@UserTransaction.TransactionDateTime</td>
                        <td>@UserTransaction.TransactionCategory</td>
                        <td>@UserTransaction.TransactionLabel</td>
                        <td>@UserTransaction.TransactionAmt</td>
                        <td>
                            <button class="btn btn-edit btn-sm" @onclick="() => ShowUpdateModal(UserTransaction)">Update</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ShowDeleteConfirm(UserTransaction.TransactionId)">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    @* Update Transaction Modal *@
    <Modal @ref="updatemodal"/>

    @* Delete Transaction Dialog *@
    <ConfirmDialog @ref="deletedialog"/>
}

@code {
    //vars
    private ApplicationUser user = default!;
    private List<UserTransaction> userTransactions = default!;

    //dependency injection
    [Inject] ToastService toastService { get; set; } = default!;

    //methods
    protected override async Task OnInitializedAsync()
    {
        AddSingle();
        userTransactions = await TransactionManager.GetTransactions();
    }

    private async Task DelTrans(int tid)
    {
        await TransactionManager.DeleteTransaction(tid);
        userTransactions = await TransactionManager.GetTransactions();
    }

    //update modal
    private Modal updatemodal = default!;
    private void ShowUpdateModal(UserTransaction transaction)
    {

    }

    //delete dialog
    private ConfirmDialog deletedialog = default!;
    private async void ShowDeleteConfirm(int tid)
    {
        var confirmation = await deletedialog.ShowAsync(
            title: "Are you sure you want to delete this transaction?",
            message1: "This action cannot be undone.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            //delete transaction
            await TransactionManager.DeleteTransaction(tid);
            toastService.Notify(new ToastMessage(ToastType.Success, $"Transaction deleted successfully."));
        }
        else
        {
            // do nothing
            toastService.Notify(new ToastMessage(ToastType.Secondary, $"Transaction not deleted."));
        }
    }

    //for devs only do not call
    private async void AddSingle()
    {
        UserTransaction temp = new UserTransaction();
        temp.TransactionId = 0;
        temp.TransactionDateTime = new DateTime(2024, 10, 31);
        temp.TransactionLabel = "Rent";
        temp.TransactionAmt = 700.0m;
        temp.TransactionCategory = "Housing";

        var uid = "94f203fb - 03d3 - 480c - b12f - 2313bd37e55e";
        temp.UserId = uid;
        temp.User = user;

        await TransactionManager.AddTransaction(temp);
    }
}