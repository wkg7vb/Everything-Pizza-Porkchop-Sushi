@using BAR.Data
@using BAR.Data.Models;
@using BAR.Data.Services;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Identity;

@inject ITransaction TransactionManager;
@inject UserManager<ApplicationUser> UserManager;
@inject ApplicationDbContext dbContext;
@inject AuthenticationStateProvider AuthenticationStateProvider;

@attribute [Authorize];

@page "/transactions"
@rendermode InteractiveServer

@*
    User will be able to veiw, edit and remove UserTransactions
*@

<PageTitle>Transaction History</PageTitle>

<h1>
    Transaction History
</h1>

@* Transactions List*@
<h3>
    SINGLE click a transaction to EDIT it.
</h3>
<h3>
    DOUBLE click a transaction to DELETE it.
</h3>

    <Grid TItem="UserTransaction"
        DataProvider="TransactionDataProvider"
        Class="table table-hover"
        AllowSorting="true"
        AllowPaging="true"
        PageSize="10"
        AllowRowClick="true"
        OnRowClick="ShowUpdateModal"
        OnRowDoubleClick="ShowDeleteConfirm"
        Responsive="true">
        <GridColumns>
            <GridColumn TItem="UserTransaction" HeaderText="Date/Time">
                @context.TransactionDateTime
            </GridColumn>
            <GridColumn TItem="UserTransaction" HeaderText="Category">
                @context.TransactionCategory
            </GridColumn>
            <GridColumn TItem="UserTransaction" HeaderText="Label">
                @context.TransactionLabel
            </GridColumn>
            <GridColumn TItem="UserTransaction" HeaderText="Amount">
                @context.TransactionAmt
            </GridColumn>
        </GridColumns>
    </Grid>

    @* Update Transaction Modal *@
    <Modal ref="updatemodal" Title="Update Transaction">
        <BodyTemplate>
            Date:
            <div class="mb-3">
                <DateInput TValue="DateTime" @bind-Value="@date" Placeholder="Enter Date" />
            </div>
            <div class="mb-3">Entered date: @date</div>
            Label:
            <input type="text" class="mt-2" @bind-value="label" /> <br>
            Amount:
            <input type="text" class="mt-2" @bind-value="amount"/> <br> <br>
            Category:
            <Dropdown Color="DropdownColor.Secondary">
                <DropdownToggleButton @bind-Value="@category">Add Category</DropdownToggleButton>
                <DropdownMenu>
                <DropdownItem To="#" Type="DropdownItemType.Link">Housing</DropdownItem>
                <DropdownItem To="#" Type="DropdownItemType.Link">Bills/Utilities</DropdownItem>
                <DropdownItem To="#" Type="DropdownItemType.Link">Grocery/Dining</DropdownItem>
                <DropdownItem To="#" Type="DropdownItemType.Link">Transportation</DropdownItem>
                <DropdownItem To="#" Type="DropdownItemType.Link">Education</DropdownItem>
                <DropdownItem To="#" Type="DropdownItemType.Link">Debt</DropdownItem>
                <DropdownItem To="#" Type="DropdownItemType.Link">Entertainment</DropdownItem>
                <DropdownItem To="#" Type="DropdownItemType.Link">Shopping</DropdownItem>
                <DropdownItem To="#" Type="DropdownItemType.Link">Medical</DropdownItem>
                <DropdownItem To="#" Type="DropdownItemType.Link">Investing</DropdownItem>
                <DropdownItem To="#" Type="DropdownItemType.Link">Miscellaneous</DropdownItem>
                </DropdownMenu>
            </Dropdown> <br>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="UpdateFromModal">Update</Button>
            <Button Color="ButtonColor.Secondary" @onclick="CancelUpdateModal">Cancel</Button>
        </FooterTemplate>
    </Modal>


    @* Delete Transaction Dialog *@
    <ConfirmDialog @ref="deletedialog"/>

@code {
    //vars
    private ApplicationUser user = default!;
    private List<UserTransaction> userTransactions = default!;
    private DateTime date = DateTime.Now.AddDays(0);
    private string category = default!;
    private string label = default!;
    private decimal amount = default!;
    private UserTransaction transactionToUpdate;

    //dependency injection
    [Inject] ToastService toastService { get; set; } = default!;

    //methods
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            user = await UserManager.GetUserAsync(authState.User);
        }
        userTransactions = await TransactionManager.GetTransactions(user.Id);
    }

    private async Task<GridDataProviderResult<UserTransaction>> TransactionDataProvider(GridDataProviderRequest<UserTransaction> request)
    {
        if (userTransactions is null)
        {
            userTransactions = await TransactionManager.GetTransactions(user.Id);
        }
        return await Task.FromResult(request.ApplyTo(userTransactions));
    }

    //update modal
    private Modal updatemodal = default!;
    private async Task ShowUpdateModal(GridRowEventArgs<UserTransaction> transaction)
    {
        transactionToUpdate = transaction.Item;
        updatemodal?.ShowAsync();
    }

    private async Task CancelUpdateModal()
    {
        updatemodal?.HideAsync();
    }

    private async Task UpdateFromModal()
    {
        transactionToUpdate.TransactionDateTime = date;
        transactionToUpdate.TransactionLabel = label;
        transactionToUpdate.TransactionAmt = amount;
        transactionToUpdate.TransactionCategory = category;

        transactionToUpdate.UserId = user.Id;
        transactionToUpdate.User = user;

        await TransactionManager.UpdateTransaction(transactionToUpdate);
        userTransactions = await TransactionManager.GetTransactions(user.Id);
    }

    //delete dialog
    private ConfirmDialog deletedialog = default!;
    private async Task ShowDeleteConfirm(GridRowEventArgs<UserTransaction> transaction)
    {
        var confirmation = await deletedialog.ShowAsync(
            title: "Delete Transaction?",
            message1: transaction.Item.TransactionLabel.ToString(),
            message2: transaction.Item.TransactionAmt.ToString());

        if (confirmation)
        {
            //delete transaction
            await TransactionManager.DeleteTransaction(transaction.Item);
            userTransactions = await TransactionManager.GetTransactions(transaction.Item.UserId);
            toastService.Notify(new ToastMessage(ToastType.Success, $"Transaction deleted successfully."));
        }
        else
        {
            // do nothing
            toastService.Notify(new ToastMessage(ToastType.Secondary, $"Transaction not deleted."));
        }
    }

    //cancel by doing nothing
    private async Task CancelButton()
    {
        await updatemodal?.HideAsync();
    }
}