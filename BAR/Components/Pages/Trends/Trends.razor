@page "/trends"

@using BAR.Data
@using BAR.Data.Services
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

@attribute [Authorize]

<div class="container">
    <h1 style="text-align: center; padding-bottom: 50px;">Trends</h1> <br> 

    @*total spending by month*@
    <LineChart @ref="totalByMonth" Width="800" /> <br>

    <div style="padding-top: 50px;">
        <h3 style="padding: 20px">3 Biggest Transactions of the Month</h3>
        <Grid TItem="UserTransaction"
            Class="table table-hover table-bordered table-striped"
            DataProvider="TransactionsDataProvider">
            <GridColumns>
                <GridColumn TItem="UserTransaction" HeaderText="Date" HeaderTextAlignment="Alignment.Center">
                    @context.TransactionDateTime.ToShortDateString()
                </GridColumn>
                <GridColumn TItem="UserTransaction" HeaderText="Label">
                    @context.TransactionLabel
                </GridColumn>
                <GridColumn TItem="UserTransaction" HeaderText="Amount" HeaderTextAlignment="Alignment.Center">
                    @context.TransactionAmt.ToString("C")
                </GridColumn>
                <GridColumn TItem="UserTransaction" HeaderText="Category" HeaderTextAlignment="Alignment.Center">
                    @context.TransactionCategory
                </GridColumn>
            </GridColumns>
        </Grid>
    </div>
</div>

@code {

        [Inject]
        private ApplicationDbContext DbContext { get; set; } = default!;

        [Inject]
        private UserManager<ApplicationUser> UserManager { get; set; } = default!;

        [Inject]
        private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
        
        [Inject]
        private ITransaction TransactionManager { get; set; } = default!;

        private ApplicationUser user = default!;
        private List<UserTransaction> userTransactions = default!;
                    //recent transactions list
        private IEnumerable<UserTransaction>? transactions; 

        // monthly total chart
        private LineChart totalByMonth = default!;
        private LineChartOptions lineChartOptions = default!;
        // Data for the chart (labels and datasets)
        private ChartData chartData = default!;
        
        private Dictionary<int,string> months = new Dictionary<int, string> {
            {1, "January"},
            {2, "February"},
            {3, "March"},
            {4, "April"},
            {5, "May"},
            {6, "June"},
            {7, "July"},
            {8, "August"},
            {9, "September"},
            {10, "October"},
            {11, "November"},
            {12, "December"}
            };

        protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated){
            user = await UserManager.GetUserAsync(authState.User);
        }
        else throw new Exception("Invalid user.");

        // total by month graph
        // Initialize chart data with 6 labels (past 6 months) and 4 datasets (Bills, Education, Debt, Investing)
        var labels = months.Values.ToList();
        chartData = new ChartData
            {
                Labels = labels [(DateTime.Now.Month - 6) .. (DateTime.Now.Month)],
                Datasets = GetTotalAmountData()
            };
        // Configure the chart to be responsive and set interaction mode to 'index'
        lineChartOptions = new() { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };
        // Set the color of X-axis and Y-axis ticks
        lineChartOptions.Scales.X!.Ticks = new ChartAxesTicks { Color = "blue" }; // X-axis ticks color
        lineChartOptions.Scales.Y!.Ticks = new ChartAxesTicks { Color = "green" }; // Y-axis ticks color
        
    }
        protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await totalByMonth.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
        //generate data for the 4 categories: Bills, Education, Debt, and Investing
        private List<IChartDataset> GetTotalAmountData()
        {
            var datasets = new List<IChartDataset>
            {
                new LineChartDataset
                {
                    Label = "Total Amount Spent",
                    Data = GetMonthlyDataPoints(),
                    BackgroundColor = "rgba(255, 99, 132, 0.5)",  // Light red
                    BorderColor = "rgba(255, 99, 132, 1)",        // Red border
                    BorderWidth = 2
                },
            };
            return datasets;
        }
        //generate random spending data for each category over 6 months
        private List<double?> GetMonthlyDataPoints()
        {
            var data = new List<double?>();
            // Generate random spending amounts for the 6-month period (Jan - June)
            for (var month = 0; month < 6; month++)
            {
                // Fetch user's transactions for the current month
                var monthBehind = DateTime.Now.Month - month;
                var transactions = DbContext.UserTransactions
                    .Where(t => t.UserId == user.Id && t.TransactionDateTime.Month == monthBehind)
                    .ToList();

                // Calculate the total spent in the current month
                var monthlyTotalSpent = transactions.Sum(t => t.TransactionAmt);
                data.Insert(0, (double) monthlyTotalSpent);
            }
            return data;
        }

        // Data provider for the Grid component displaying transactions
        private async Task<GridDataProviderResult<UserTransaction>> TransactionsDataProvider(GridDataProviderRequest<UserTransaction> request)
        {
            if (transactions == null) // Fetch transactions only once to optimize
                transactions = await GetUserTransactionsAsync();

            return await Task.FromResult(request.ApplyTo(transactions));
        }

        // Fetch the biggest 3 transactions
        private async Task<IEnumerable<UserTransaction>> GetUserTransactionsAsync()
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);

            if (userId == null)
                return Enumerable.Empty<UserTransaction>();

            // Get the biggest 3 transactions for the current user, ordered by date
            return await DbContext.UserTransactions
                .Where(t => t.UserId == userId && t.TransactionDateTime.Month==DateTime.Now.Month)
                .OrderByDescending(t => t.TransactionAmt)
                .Take(3)
                .ToListAsync();
        }
}