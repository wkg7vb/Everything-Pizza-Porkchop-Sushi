@page "/trends"
@using BAR.Data
@using BAR.Data.Services
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

@attribute [Authorize]

<div class="container">
    <h1 style="text-align: center; padding-bottom: 50px;">Trends</h1> <br>

    <h2>Biggest Transactions of the Month</h2>
    <div class="grid">
        <Card class="item" Style="width:18rem;">
            <CardBody Style="text-align: center">
                <CardTitle>First Place</CardTitle>
                <CardText>$1000000</CardText>
                <CardSubTitle Class="mb-2 text-muted">New Boat</CardSubTitle>
            </CardBody>
        </Card>
        <Card class="item" Style="width:18rem;">
            <CardBody Style="text-align: center">
                <CardTitle>Second Place</CardTitle>
                <CardText>$10839</CardText>
                <CardSubTitle Class="mb-2 text-muted">Dinner</CardSubTitle>
            </CardBody>
        </Card>
        <Card class="item" Style="width:18rem;">
            <CardBody Style="text-align: center">
                <CardTitle>Third Place</CardTitle>
                <CardText>$839</CardText>
                <CardSubTitle Class="mb-2 text-muted">Goat Doctor</CardSubTitle>
            </CardBody>
        </Card>
    </div>
    

<div style="padding-top: 50px;">
    <h3 style="padding: 20px">Recent Transactions</h3>
    <Grid TItem="UserTransaction"
          Class="table table-hover table-bordered table-striped"
          DataProvider="TransactionsDataProvider">
        <GridColumns>
            <GridColumn TItem="UserTransaction" HeaderText="Date" HeaderTextAlignment="Alignment.Center">
                @context.TransactionDateTime.ToShortDateString()
            </GridColumn>
            <GridColumn TItem="UserTransaction" HeaderText="Label">
                @context.TransactionLabel
            </GridColumn>
            <GridColumn TItem="UserTransaction" HeaderText="Amount" HeaderTextAlignment="Alignment.Center">
                @context.TransactionAmt.ToString("C")
            </GridColumn>
            <GridColumn TItem="UserTransaction" HeaderText="Category" HeaderTextAlignment="Alignment.Center">
                @context.TransactionCategory
            </GridColumn>
        </GridColumns>
    </Grid>
</div>
</div>

@code {

        [Inject]
        private ApplicationDbContext DbContext { get; set; } = default!;

        [Inject]
        private UserManager<ApplicationUser> UserManager { get; set; } = default!;

        [Inject]
        private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
        
        [Inject]
        private ITransaction TransactionManager { get; set; } = default!;

        private async Task<GridDataProviderResult<UserTransaction>> TransactionDataProvider(GridDataProviderRequest<UserTransaction> request)
    {
        if (userTransactions is null)
        {
            userTransactions = await TransactionManager.GetTransactions(user.Id);
        }
        return await Task.FromResult(request.ApplyTo(userTransactions));
    }

        protected override async Task OnInitializedAsync()
        {

            await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated){
            user = await UserManager.GetUserAsync(authState.User);
        }
            userTransactions = await TransactionManager.GetTransactions(user.Id);

        }

        // Data provider for the Grid component displaying transactions
        private async Task<GridDataProviderResult<UserTransaction>> TransactionsDataProvider(GridDataProviderRequest<UserTransaction> request)
        {
            if (transactions == null) // Fetch transactions only once to optimize
                transactions = await GetUserTransactionsAsync();

            return await Task.FromResult(request.ApplyTo(transactions));
        }

        // Fetch the recent transactions for the current user
        private async Task<IEnumerable<UserTransaction>> GetUserTransactionsAsync()
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);

            if (userId == null)
                return Enumerable.Empty<UserTransaction>();

            // Get the latest 5 transactions for the current user, ordered by date
            return await DbContext.UserTransactions
                .Where(t => t.UserId == userId)
                .OrderByDescending(t => t.TransactionAmt)
                .Take(5)
                .ToListAsync();
        }
}