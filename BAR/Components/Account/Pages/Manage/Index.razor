@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BAR.Data
@using BAR.Data.Models

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

@* <h3>Profile</h3> *@
<div class="d-flex flex-row justify-content-left align-items-center gap-5 mb-4">
    @* TODO: change AvatarColor back to UserAvatarColor instead of selectedColor *@
    <ProfileAvatar UserFName="@userFName" AvatarColor="@userAvatarColor" Size="profile-avatar-profile"/>
    <h1>User profile</h1>
</div>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-decimaling mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-decimaling mb-3">
                <InputText @bind-Value="Input.FName" class="form-control" placeholder="Please enter your first name." />
                <label for="phone-number" class="form-label">First name</label>
                <ValidationMessage For="() => Input.FName" class="text-danger" />
            </div>
            <div class="form-decimaling mb-3">
                <InputText @bind-Value="Input.LName" class="form-control" placeholder="Please enter your last name." />
                <label for="phone-number" class="form-label">Last name</label>
                <ValidationMessage For="() => Input.LName" class="text-danger" />
            </div>
            <div class="form-decimaling mb-3">
                <h5>Currency Type:</h5>
                <select @bind='userLocale'>
                    <option value="en-US">US Dollar (USD)</option>
                    <option value="es-MX">Mexican Peso (MXN)</option>
                    <option value="en-EU">European Euro (EUR)</option>
                    <option value="en-GB">Pound Sterling (GBP)</option>
                </select>
            </div>
            <div class="form-decimaling mb-3">
                <Switch @bind-Value=userDarkmode Label="Dark mode" class="my-4"/>
            </div>
            <div class="form-decimaling mb-3">
                <Button Color="ButtonColor.Primary" To="/Account/Manage/ChangeAvatarColor" Type="ButtonType.Link">Change avatar color</Button>
            </div>
            @* Might remove, not sure if phone number is needed here *@
            @* <div class="form-decimaling mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div> *@
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;

    private string? username;
    private string? phoneNumber;
    private string? userFName;
    private string? userAvatarColor;
    private string? userLocale;
    private bool userDarkmode;


    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);
        userFName = user.UserFName;
        userAvatarColor = user.UserAvatarColor;
        userLocale = user.UserLocale;
        userDarkmode = user.UserDarkmode;

        Input.FName ??= user.UserFName;
        Input.LName ??= user.UserLName;
        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        user.UserFName = Input.FName;
        user.UserLName = Input.LName;
        user.UserLocale = userLocale;
        user.UserDarkmode = userDarkmode;

        var updateResult = await UserManager.UpdateAsync(user);
        if (!updateResult.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
        public string? FName {get; set;}
        public string? LName {get; set;}
    }
}
