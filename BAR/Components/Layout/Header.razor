@using BAR.Data;
@using BAR.Data.Models;
@using BAR.Data.Services;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Identity;
@rendermode InteractiveServer
@inject NavigationManager NavigationManager;
@inject ITransaction TransactionManager;
@inject UserManager<ApplicationUser> UserManager;
@inject ApplicationDbContext dbContext;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<Toasts class="p-3" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopCenter" />

<div class="top-row d-flex flex-row mb-3 justify-content-between align-items-center">
    <div class="p-2">
        @if(UserFName is not null){
            imageRedir = "/home";
        }
        else{
            imageRedir = "/";
        }
        <a href="@imageRedir">
            <img src="/Images/Smooth-BAR-Logo-100.png">
        </a>
    </div>
    <div class="center-col p-2">
        <AuthorizeView>
            <Authorized>
                <div class="add"> 
                    <Button Color="ButtonColor.Success" @onclick=AddNewTransaction> + Add Transaction</Button>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="p-2 register">
                    <Button Type="ButtonType.Link" To="Account/Register" Color="ButtonColor.Success">
                        Register
                    </Button>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
    <div class="p-2">
        <AuthorizeView>
            <Authorized>
                <div class="p-2"> 
                    <Dropdown Color="DropdownColor.None" Style="background-color: white;">
                        <DropdownToggleButton>
                            <ProfileAvatar UserFName="@UserFName" AvatarColor="@AvatarColor" Size="profile-avatar"/>
                        </DropdownToggleButton>
                        <DropdownMenu>
                            <DropdownHeader>Hi, @UserFName!</DropdownHeader>
                            <DropdownItem To="/Account/Manage" Type="DropdownItemType.Link"><Icon Name="IconName.Gear"/> Settings</DropdownItem>
                            <DropdownDivider>Dropdown header</DropdownDivider>
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken />
                                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                <button class="btn dropdown-item" type="submit">
                                    <Icon Name="IconName.BoxArrowRight" Color="IconColor.Danger"/> Log out
                                </button>
                            </form>
                        </DropdownMenu>
                    </Dropdown>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="p-2">
                    <Button Type="ButtonType.Link" To="Account/Login" Color="ButtonColor.Primary">
                        Login
                    </Button>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@* Add Transaction popup *@
<Modal @ref="addmodal" Title="Add Transaction" IsVerticallyCentered="true">
    <BodyTemplate>
        Date:
        <div class="mb-3">
            <DateInput TValue="DateTime" @bind-Value="@date" Placeholder="Enter Date" />
        </div>
        <div class="mb-3">Entered date: @date</div>
        Label:
        <input type="text" class="mt-2" @bind-value="label" /> <br>
        Amount:
        <input type="text" class="mt-2" @bind-value="amount" /> <br> <br>
        Category:
        <InputSelect @bind-value="category">
            <option value="Housing">Housing</option>
            <option value="Bills/Utilities">Bills/Utilities</option>
            <option value="Grocery/Dining">Grocery/Dining</option>
            <option value="Transportation">Transportation</option>
            <option value="Education">Education</option>
            <option value="Debt">Debt</option>
            <option value="Entertainment">Entertainment</option>
            <option value="Shopping">Shopping</option>
            <option value="Medical">Medical</option>
            <option value="Investing">Investing</option>
            <option value="Miscellaneous">Miscellaneous</option>
        </InputSelect>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="AddFromModal">Add</Button>
        <Button Color="ButtonColor.Secondary" @onclick="CancelAddTransaction">Cancel</Button>
    </FooterTemplate>
</Modal>

@code {
    [Parameter] public string UserFName {get; set;} 
    [Parameter] public string AvatarColor {get; set;}
    private Modal addmodal;
    private string? currentUrl;
    private string imageRedir;
    private string category;
    private string label;
    private decimal amount;
    private DateTime date = DateTime.Now.AddDays(0);
    private ApplicationUser user = default!;
    [Inject] ToastService toastService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            user = await UserManager.GetUserAsync(authState.User);
        }
    }

    private async Task AddFromModal()
    {
        if (label != null && amount != 0.00m)
        {
            UserTransaction transaction = new UserTransaction();
            transaction.TransactionDateTime = date;
            transaction.TransactionLabel = label;
            transaction.TransactionAmt = amount;
            transaction.TransactionCategory = category;

            transaction.UserId = user.Id;
            transaction.User = user;

            await TransactionManager.AddTransaction(transaction);
            await addmodal?.HideAsync();
            //FIXME refresh grid
        }
        else
        {
            toastService.Notify(new ToastMessage(ToastType.Danger, $"Please fill all fields."));
        }
    }

    private async Task AddNewTransaction()
    {
        date = DateTime.Now.AddDays(0);
        label = "";
        amount = 0.0m;
        category = "Housing";
        await addmodal?.ShowAsync();
    }

    private async Task CancelAddTransaction()
    {
        await addmodal?.HideAsync();
    }

    private DateOnly date1 = DateOnly.FromDateTime(DateTime.Now.AddDays(0));
    
    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    // Vars
    // database stuff still tbd
}