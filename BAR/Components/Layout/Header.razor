@inject NavigationManager NavigationManager

<div class="top-row d-flex mb-3 justify-content-between align-items-center">
    <div class="p-2">
        <a href="/">
            <img src="/Images/Smooth-BAR-Logo-100.png">
        </a>
    </div>
    <div class="p-2"> 
        <Dropdown Color="DropdownColor.None" Style="background-color: white;">
            <DropdownToggleButton>
                <ProfileAvatar UserFName="@UserFName" AvatarColor="@AvatarColor" Size="profile-avatar"/>
            </DropdownToggleButton>
            <DropdownMenu>
                <DropdownHeader>Hi, @UserFName!</DropdownHeader>
                <DropdownItem To="/Account/Manage" Type="DropdownItemType.Link"><Icon Name="IconName.Gear"/> Settings</DropdownItem>
                <DropdownDivider>Dropdown header</DropdownDivider>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button class="btn dropdown-item" type="submit">
                    <Icon Name="IconName.BoxArrowRight" Color="IconColor.Danger"/> Log out
                    </button>
                </form>
            </DropdownMenu>
        </Dropdown>
    </div>

</div>



@code {
    [Parameter] public string UserFName {get; set;} 
    [Parameter] public string AvatarColor {get; set;}

    private void LogOut(){
        // TODO: implement log out functionality
    }

    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}