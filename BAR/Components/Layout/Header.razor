@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<div class="top-row d-flex flex-row mb-3 justify-content-between align-items-center">
    <div class="p-2">
        @if(Authed){
            imageRedir = "/home";
        }
        else{
            imageRedir = "/";
        }
        <a href="@imageRedir">
            <img src="/Images/Smooth-BAR-Logo-100.png">
        </a>
    </div>
    <div class="center-col p-2">
        <AuthorizeView>
            <Authorized>
                <div class="add"> 
                    <Button Color="ButtonColor.Success" @onclick=AddTransaction> + Add Transaction</Button>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="p-2 register">
                    <Button Type="ButtonType.Link" To="Account/Register" Color="ButtonColor.Success">
                        Register
                    </Button>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
    <div class="p-2">
        <AuthorizeView>
            <Authorized>
                <div class="p-2"> 
                    <Dropdown Color="DropdownColor.None" Style="background-color: white;">
                        <DropdownToggleButton>
                            <ProfileAvatar UserFName="@UserFName" AvatarColor="@AvatarColor" Size="profile-avatar"/>
                        </DropdownToggleButton>
                        <DropdownMenu>
                            <DropdownHeader>Hi, @UserFName!</DropdownHeader>
                            <DropdownItem To="/Account/Manage" Type="DropdownItemType.Link"><Icon Name="IconName.Gear"/> Settings</DropdownItem>
                            <DropdownDivider>Dropdown header</DropdownDivider>
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken />
                                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                <button class="btn dropdown-item" type="submit">
                                <Icon Name="IconName.BoxArrowRight" Color="IconColor.Danger"/> Log out
                                </button>
                            </form>
                        </DropdownMenu>
                    </Dropdown>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="p-2">
                    <Button Type="ButtonType.Link" To="Account/Login" Color="ButtonColor.Primary">
                        Login
                    </Button>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@* Add Transaction popup *@
<Modal @ref="addT" Title="Add Transaction">
    <BodyTemplate> 
        Label:
        <input type="text" class="mt-2"/> <br>
        Amount (selected currency):
        <input type="text" class="mt-2"/> <br>
        Category:
        <input type="text" class="mt-2"/> <br>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="CancelAddTransaction">Add</Button>
        <Button Color="ButtonColor.Secondary" @onclick="CancelAddTransaction">Cancel</Button>
    </FooterTemplate>
</Modal>

@code {
    [Parameter] public string UserFName {get; set;} 
    [Parameter] public string AvatarColor {get; set;}
    private Modal addT;
    private string? currentUrl;
    private string imageRedir;
    private bool Authed;

    private async Task AddTransaction()
    {
        await addT?.ShowAsync();
    }

    private async Task CancelAddTransaction()
    {
        await addT?.HideAsync();
    }
    
    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}



    


