@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@inject IdentityUserAccessor UserAccessor
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext dbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row d-flex mb-3 justify-content-between align-items-center">
    <div class="p-2">
        <a href="/">
            <img src="/Images/Smooth-BAR-Logo-100.png">
        </a>
    </div>
    <div class="add"> 
        <Button Color="ButtonColor.Light" @onclick=AddTransaction> + Add Transaction
        </Button>
    </div>
    <div class="p-2"> 
        <Dropdown Color="DropdownColor.None" Style="background-color: white;">
            <DropdownToggleButton>
                <ProfileAvatar UserFName="@UserFName" AvatarColor="@AvatarColor" Size="profile-avatar"/>
            </DropdownToggleButton>
            <DropdownMenu>
                <DropdownHeader>Hi, @UserFName!</DropdownHeader>
                <DropdownItem To="/Account/Manage" Type="DropdownItemType.Link"><Icon Name="IconName.Gear"/> Settings</DropdownItem>
                <DropdownDivider>Dropdown header</DropdownDivider>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button class="btn dropdown-item" type="submit">
                    <Icon Name="IconName.BoxArrowRight" Color="IconColor.Danger"/> Log out
                    </button>
                </form>
            </DropdownMenu>
        </Dropdown>
    </div>

</div>

@* Add Transaction popup *@
<Modal @ref="addT" Title="Add Transaction">
    <BodyTemplate> 
        Date:
        <div class="mb-3">
            <DateInput TValue="DateOnly" @bind-Value="@date1" Placeholder="Enter Date" />
        </div>
            <div class="mb-3">Entered date: @date1</div> 
        Label:
        <input type="text" class="mt-2"/> <br>
        Amount:
        <input type="text" class="mt-2"/> <br> <br>
        Category:
        <Dropdown Color="DropdownColor.Secondary">
            <DropdownToggleButton>Dropdown button</DropdownToggleButton>
            <DropdownMenu>
                <DropdownItem To="#" Type="DropdownItemType.Link">Action</DropdownItem>
                <DropdownItem To="#" Type="DropdownItemType.Link">Another action</DropdownItem>
                <DropdownItem To="#" Type="DropdownItemType.Link">Something else here</DropdownItem>
            </DropdownMenu>
        </Dropdown> <br>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="CancelAddTransaction">Add</Button>
        <Button Color="ButtonColor.Secondary" @onclick="CancelAddTransaction">Cancel</Button>
    </FooterTemplate>
</Modal>

@code {
   [Parameter] public string UserFName {get; set;} 
    [Parameter] public string AvatarColor {get; set;}
    private Modal addT;
    private string? currentUrl;

    private async Task AddTransaction()
    {
        await addT?.ShowAsync();
    }

    private async Task CancelAddTransaction()
    {
        await addT?.HideAsync();
    }

    private DateOnly date1 = DateOnly.FromDateTime(DateTime.Now.AddDays(0));
    
    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    // Vars
    // User vars from db (init'd inside OnInitialiedAsync)
    private ApplicationUser user = default!;
    private UserTransaction addt;

    // Local vars
    private string userCurrencyLocale {get; set;}
    // private List<CategoryData> elmts = new();
    private string? err;
    private string? msg;
    private List<string> categories = new List<string> {
        "Housing",
        "Bills/Utilities",
        "Grocery/Dining",
        "Transportation",
        "Education",
        "Debt",
        "Entertainment",
        "Shopping",
        "Medical",
        "Investing",
        "Miscellaneous"
    };

    // Functions
    // Runs when page is loaded, pseudo "constructor"-like function
    // Runs twice on interactive pages
    // TODO: look at how to prevent the render code from running twice
    protected override async Task OnInitializedAsync()
    {
        // Attain authenticaiton state and user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;
        if (claimsPrincipal.Identity.IsAuthenticated){
            user = await UserManager.GetUserAsync(claimsPrincipal);
        }

        // Init local vars from db
        if (user is not null)
        {
            userCurrencyLocale = user.UserLocale;
            addt = await dbContext.UserBudgets.SingleOrDefaultAsync(p => p.UserId == user.Id);
        }
        else throw new Exception("Invalid user.");
        
        // Populate elmts list from db
        if  (addt is not null)
        {
            if  addt.HousingAmt is not null) AddCategoryElmt(type: "Housing", amt:   addt.HousingAmt);
            if  addt.BillsUtilsAmt is not null) AddCategoryElmt(type: "Bills/Utilities", amt:    addt.BillsUtilsAmt);
            if  addt.GroceryDiningAmt is not null) AddCategoryElmt(type: "Grocery/Dining", amt:  addt.GroceryDiningAmt);
            if  addt.TransportAmt is not null) AddCategoryElmt(type: "Transportation", amt:  addt.TransportAmt);            
            if  addt.EducationAmt is not null) AddCategoryElmt(type: "Education", amt:   addt.EducationAmt);
            if  addt.DebtAmt is not null) AddCategoryElmt(type: "Debt", amt: addt.DebtAmt);
            if  addt.EntertainmentAmt is not null) AddCategoryElmt(type: "Entertainment", amt:   addt.EntertainmentAmt);
            if  addt.ShoppingAmt is not null) AddCategoryElmt(type: "Shopping", amt: addt.ShoppingAmt);
            if  addt.MedicalAmt is not null) AddCategoryElmt(type: "Medical", amt:   addt.MedicalAmt);
            if  addt.InvestingAmt is not null) AddCategoryElmt(type: "Investing", amt:   addt.InvestingAmt);
            if  addt.MiscAmt is not null) AddCategoryElmt(type: "Miscellaneous", amt:    addt.MiscAmt);
            if (elmts.Count() == 0 &&   addt.AllCategoriesNull) AddCategoryElmt();
        }
        // Initialize a generic category cell when no user data is available
        else
        {
            addt = new UserBudget{
                UserId = user.Id,
                User = user
            };
            await dbContext.UserBudgets.AddAsync addt);
            await dbContext.SaveChangesAsync();
        }
    }

    // Add an element into elmts to be rendered
    private void AddCategoryElmt()
    {
        CategoryData newData = new CategoryData{
            Type = categories[0],
            Amt = 0.0m
        };
        if (categories.Contains(newData.Type)) categories.Remove(newData.Type);
        try
        {
            if (categories.Count < 1) throw new Exception("You cannot add more categories.");
        }
        catch (Exception e)
        {
            err = e.Message;
            return;
        }
        elmts.Add(newData);
    }

    // Overloaded function for element initialization on pageload, taking two params
    private void AddCategoryElmt(string type, decimal? amt)
    {
        CategoryData newData = new CategoryData{
            Type = type,
            Amt = (decimal)amt
        };
        if (categories.Contains(newData.Type)) categories.Remove(newData.Type);
        try
        {
            if (categories.Count < 1) throw new Exception("You cannot add more categories.");
        }
        catch (Exception e)
        {
            err = e.Message;
            return;
        }
        elmts.Add(newData);
    }

    // Callback function to remove element (see CategoryElmt.razor)
    private void RemoveCategoryElmt(CategoryData del)
    {
        foreach (var elmt in elmts)
        {
            try
            {
                if (elmts.Count == 1) throw new Exception("You must have at least one category.");
            }
            catch (Exception e)
            {
                err = e.Message;
                return;
            }

            if (elmt.Equals(del))
            {
                elmts.Remove(elmt);
                categories.Add(elmt.Type);
                break;
            }
        }
    }

    // TODO: send elmts.CategoryData and    addtAmt to db
    private async void SaveChangesAsync()
    {
        Type    addttype =  addt.GetType();
        PropertyInfo[] properties = addttype.GetProperties();

        foreach (PropertyInfo property in properties){
            switch (property.Name){
                case "HousingAmt":
                    if (!categories.Contains("Housing")){
                        var data = elmts.Find(x => x.Type == "Housing");
                        addt.HousingAmt = data.Amt;
                    }
                    else  {
                        addt.HousingAmt = null;
                    }
                    break;
                case "BillsUtilsAmt":
                    if (!categories.Contains("Bills/Utilities")){
                        var data = elmts.Find(x => x.Type == "Bills/Utilities");
                        addt.BillsUtilsAmt = data.Amt;
                    }
                    else  {
                        addt.BillsUtilsAmt = null;
                    }
                    break;
                case "GroceryDiningAmt":
                    if (!categories.Contains("Grocery/Dining")){
                        var data = elmts.Find(x => x.Type == "Grocery/Dining");
                        addt.GroceryDiningAmt = data.Amt;
                    }
                    else  {
                        addt.GroceryDiningAmt = null;
                    }
                    break;
                case "TransportAmt":
                    if (!categories.Contains("Transportation")){
                        var data = elmts.Find(x => x.Type == "Transportation");
                        addt.TransportAmt = data.Amt;
                    }
                    else  {
                        addt.TransportAmt = null;
                    }
                    break;
                case "EducationAmt":
                    if (!categories.Contains("Education")){
                        var data = elmts.Find(x => x.Type == "Education");
                        addt.EducationAmt = data.Amt;
                    }
                    else  {
                        addt.EducationAmt = null;
                    }
                    break;
                case "DebtAmt":
                    if (!categories.Contains("Debt")){
                        var data = elmts.Find(x => x.Type == "Debt");
                        addt.DebtAmt = data.Amt;
                    }
                    else  {
                        addt.DebtAmt = null;
                    }
                    break;
                case "EntertainmentAmt":
                    if (!categories.Contains("Entertainment")){
                        var data = elmts.Find(x => x.Type == "Entertainment");
                        addt.EntertainmentAmt = data.Amt;
                    }
                    else  {
                        addt.EntertainmentAmt = null;
                    }
                    break;
                case "ShoppingAmt":
                    if (!categories.Contains("Shopping")){
                        var data = elmts.Find(x => x.Type == "Shopping");
                        addt.ShoppingAmt = data.Amt;
                    }
                    else  {
                        addt.ShoppingAmt = null;
                    }
                    break;
                case "MedicalAmt":
                    if (!categories.Contains("Medical")){
                        var data = elmts.Find(x => x.Type == "Medical");
                        addt.MedicalAmt = data.Amt;
                    }
                    else  {
                        addt.MedicalAmt = null;
                    }
                    break;
                case "InvestingAmt":
                    if (!categories.Contains("Investing")){
                        var data = elmts.Find(x => x.Type == "Investing");
                        addt.InvestingAmt = data.Amt;
                    }
                    else  {
                        addt.InvestingAmt = null;
                    }
                    break;
                case "MiscAmt":
                    if (!categories.Contains("Miscellaneous")){
                        var data = elmts.Find(x => x.Type == "Miscellaneous");
                        addt.MiscAmt = data.Amt;
                    }
                    else  {
                        addt.MiscAmt = null;
                    }
                    break;
                default:
                    break;
            }
        }
        try {
            var updateResult = await dbContext.SaveChangesAsync();
        }
        catch(Exception e) {
            err = e.Message;
        }
        msg = "Your changes have been saved.";
    }

    // Clears error out when alert is closed
    private void ClearErr()
    {
        err = string.Empty;
    }
    // Clear message out when alert is closed
    private void ClearMsg()
    {
        msg = string.Empty;
    }
}



    


