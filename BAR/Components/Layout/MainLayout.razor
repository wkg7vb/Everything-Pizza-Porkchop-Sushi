@inherits LayoutComponentBase

@using System.ComponentModel.DataAnnotations
@using BAR.Components.Account
@using Microsoft.AspNetCore.Identity
@using BAR.Data
@using BAR.Data.Models

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        @if (user is not null){
            <Header UserFName="@UserFName" AvatarColor="@UserAvatarColor"/>
            
            <article class="content px-4">
                @Body
            </article>
        }
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    // Master user from db
    private ApplicationUser user {get; set;} = default!;

    [CascadingParameter]
    HttpContext context {get; set;} = default!;
    // Local vars for userdata
    private string UserFName;
    private string UserAvatarColor;
    // TODO: pull in stylesheet based on this value
    private bool UserDarkMode;
    @* [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!; *@

    // Pull user from db
    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();
        try {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated){
                user = await UserManager.GetUserAsync(authState.User);
            }
            else {
                throw new Exception("You must be logged in to see this page.");
            }
        }
        catch (Exception e) {
            context.Response.Cookies.Append("Identity.StatusMessage", e.Message, StatusCookieBuilder.Build(context));
        }
        if (user is not null){
            UserFName = user.UserFName;
            UserDarkMode = user.UserDarkmode;
            UserAvatarColor = user.UserAvatarColor;
        }
    }

    private static readonly CookieBuilder StatusCookieBuilder = new()
        {
            SameSite = SameSiteMode.Strict,
            HttpOnly = true,
            IsEssential = true,
            MaxAge = TimeSpan.FromSeconds(5),
        };
} 
